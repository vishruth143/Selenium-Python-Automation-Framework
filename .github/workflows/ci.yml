name: CI - Docker Build and Test

on:
  push:
    paths:
      - '.github/**'
      - 'config/**'
      - 'framework/**'
      - 'tests/**'
      - 'Dockerfile'
      - 'pytest.ini'
      - 'requirements.txt'
    branches:
      - '**'

  pull_request:
    branches:
      - main

  schedule:
    - cron: '30 3 * * *'  # Runs at 09:00 AM IST every day

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint

      - name: Run Pylint on tests and Enforce 10/10 Score
        run: |
          echo "Linting tests directory..."
          SCORE=$(pylint tests | tee pylint-output.txt | tail -n 2 | grep "rated at" | awk '{print $7}' | cut -d'/' -f1)
          echo "Pylint Score: $SCORE"
          if [ "$(echo "$SCORE < 10.0" | bc)" -eq 1 ]; then
            echo "❌ Pylint score is less than 10.0. Failing the build."
            exit 1
          fi

  build-and-test:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: docker build -t selenium-tests .

      - name: Run Pytest in Docker
        run: |          
          docker run --name test-container\
            -e APP_NAME=PTA \
            -e SERVICE_NAME=REQRES \
            -e REGION=qa \
            -e BROWSER=CHROME \
            -e HEADLESS=Y \
            selenium-tests \ 
            sh -c "pytest tests"

      - name: Copy Allure Results  and Screenshots from Container
        run: |
          docker cp test-container:/app/output/allure-results ./allure-results || echo "No allure-results"
          docker cp test-container:/app/output/screenshots ./screenshots || echo "No screenshots"

      - name: Install Allure CLI (Manual)
        run: |
          wget https://github.com/allure-framework/allure2/releases/latest/download/allure-2.34.0.tgz
          tar -zxvf allure-2.34.0.tgz
          sudo mv allure-2.34.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version

      - name: Generate Allure Report HTML
        run: |
          allure generate allure-results --clean -o allure-report

      - name: Upload Allure HTML Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Upload Screenshots as Artifact
        if: always()  # Always attempt to upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
            name: screenshots
            path: screenshots

  notify-teams:
    name: Notify Teams
    needs: [ lint, build-and-test ]
    runs-on: ubuntu-latest
    if: always()  # Always run this job

    steps:
      - name: Send Notification to Microsoft Teams
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          LINT_STATUS: ${{ needs.lint.result }}
          BUILD_STATUS: ${{ needs.build-and-test.result }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          echo "Lint Job Status: $LINT_STATUS"
          echo "Build and Test Job Status: $BUILD_STATUS"

          OVERALL_STATUS="success"
          STATUS_EMOJI="✅"
          COLOR="00FF00"

          if [ "$LINT_STATUS" != "success" ] || [ "$BUILD_STATUS" != "success" ]; then
            OVERALL_STATUS="failure"
            STATUS_EMOJI="❌"
            COLOR="FF0000"
          fi

          MESSAGE=$(cat <<EOF
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "$COLOR",
            "summary": "Automation CI Status",
            "sections": [ {
              "activityTitle": "$STATUS_EMOJI Selenium CI Pipeline Report",
              "facts": [
                { "name": "Trigger", "value": "$GITHUB_EVENT_NAME" },
                { "name": "Triggered By", "value": "$GITHUB_ACTOR" },
                { "name": "Lint Job", "value": "$LINT_STATUS" },
                { "name": "Build & Test Job", "value": "$BUILD_STATUS" },
                { "name": "Branch", "value": "$GITHUB_REF_NAME" },
                { "name": "Run", "value": "[View Run]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" }                
              ],
              "markdown": true
            } ]
          }
          EOF
          )

          curl --retry 3 --retry-delay 5 -H "Content-Type: application/json" -d "$MESSAGE" "$TEAMS_WEBHOOK_URL"
