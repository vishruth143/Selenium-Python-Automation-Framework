name: CI - Docker Build and Test

on:
  push:
    paths:
      - 'pta_automation/**'
      - 'Dockerfile'
    branches:
      - '**'
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint

      - name: Run Pylint on pta_automation and Enforce 10/10 Score
        run: |
          echo "Linting pta_automation directory..."
          SCORE=$(pylint pta_automation | tee pylint-output.txt | tail -n 2 | grep "rated at" | awk '{print $7}' | cut -d'/' -f1)
          echo "Pylint Score: $SCORE"
          if [ "$(echo "$SCORE < 10.0" | bc)" -eq 1 ]; then
            echo "❌ Pylint score is less than 10.0. Failing the build."
            exit 1
          fi

  build-and-test:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: docker build -t selenium-tests .

      - name: Run Pytest in Docker
        run: |          
          docker run --name test-container \
            -e REGION=qa \
            -e BROWSER=CHROME \
            -e HEADLESS=Y \
            selenium-tests \
            sh -c "pytest --alluredir=allure-results pta_automation/tests"

      - name: Copy Allure Results  and Screenshots from Container
        run: |
          docker cp test-container:/app/allure-results ./allure-results || echo "No allure-results"
          docker cp test-container:/app/screenshots ./screenshots || echo "No screenshots"

      - name: Install Allure CLI (Manual)
        run: |
          wget https://github.com/allure-framework/allure2/releases/latest/download/allure-2.34.0.tgz
          tar -zxvf allure-2.34.0.tgz
          sudo mv allure-2.34.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version

      - name: Generate Allure Report HTML
        run: |
          allure generate allure-results --clean -o allure-report

      - name: Upload Allure HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Upload Screenshots as Artifact
        if: always()  # Always attempt to upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
            name: screenshots
            path: screenshots

  notify-teams:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Debug Teams Webhook with Simple Message
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" -d '{
            "text": "🚀 Hello from GitHub Actions! This is a basic Teams message to confirm the webhook is working."
          }' "$TEAMS_WEBHOOK_URL"